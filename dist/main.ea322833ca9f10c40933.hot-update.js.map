{"version":3,"sources":["webpack:///./src/actions/adminActions.js"],"names":["adminActions","login","payload","dispatch","type","actionTypes","admin","LOGGING","self","Promise","resolve","reject","email","password","includes","toLowerCase","data","admins","filter","workers","worker","manager_id","id","initializeAdmin","error","INITIALIZE_ADMIN"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe;AAAA,SAAa;AAChCC,WAAO,eAACC,OAAD,EAAa;AAClBC,eAAS,EAAEC,MAAMC,sBAAYC,KAAZ,CAAkBC,OAA1B,EAAT;AACA,UAAIC,gBAAJ;AACA,aAAO,IAAIC,OAAJ,CAAa,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAAA,YACpCC,KADoC,GAChBV,OADgB,CACpCU,KADoC;AAAA,YAC7BC,QAD6B,GAChBX,OADgB,CAC7BW,QAD6B;;AAE5C,YAAI,CAAC,oBAAD,EAAuB,oBAAvB,EAA6CC,QAA7C,CAAsDF,MAAMG,WAAN,EAAtD,KAA8EF,YAAY,UAA9F,EAA2G;AACzG,cAAMP,SAAQU,eAAKC,MAAL,CAAYC,MAAZ,CAAmB,UAACZ,KAAD;AAAA,mBAAYA,MAAMM,KAAN,IAAeA,KAA3B;AAAA,WAAnB,EAAqD,CAArD,CAAd;AACA,cAAMO,UAAUH,eAAKG,OAAL,CAAaD,MAAb,CAAoB,UAACE,MAAD;AAAA,mBAAaA,OAAOC,UAAP,IAAqBf,OAAMgB,EAAxC;AAAA,WAApB,CAAhB;AACAnB,mBAASH,eAAeuB,eAAf,CAA+BjB,MAA/B,CAAT;AACAI,kBAAQ,EAACJ,aAAD,EAAR;AACD,SALD,MAKO;AACLK,iBAAO,EAACa,OAAO,iCAAR,EAAP;AACD;AACF,OAVM,CAAP;AAWD,KAf+B;AAgBhCD,qBAAiB,yBAACrB,OAAD,EAAa;AAC5B;AACAC,eAAS,EAAEC,MAAMC,sBAAYC,KAAZ,CAAkBmB,gBAA1B,EAA4CvB,SAASI,KAArD,EAAT;AACD;AAnB+B,GAAb;AAAA,CAArB;;kBAsBeN,Y","file":"main.ea322833ca9f10c40933.hot-update.js","sourcesContent":["import actionTypes from '../consts/actionTypes';\n\nimport data from './data';\n\nconst adminActions = dispatch => ({\n  login: (payload) => {\n    dispatch({ type: actionTypes.admin.LOGGING });\n    let self = this\n    return new Promise (function(resolve, reject) {\n      const { email, password } = payload\n      if ([\"vishal@wakecap.com\", \"hassan@wakecap.com\"].includes(email.toLowerCase()) && password == \"password\" ) {\n        const admin = data.admins.filter((admin) =>  admin.email == email)[0]\n        const workers = data.workers.filter((worker) =>  worker.manager_id == admin.id)\n        dispatch(adminActions().initializeAdmin(admin));\n        resolve({admin})\n      } else {\n        reject({error: \"Email or Password is incorrect!\"})\n      }\n    })\n  },\n  initializeAdmin: (payload) => {\n    debugger\n    dispatch({ type: actionTypes.admin.INITIALIZE_ADMIN, payload: admin });\n  }\n});\n\nexport default adminActions;\n"],"sourceRoot":""}